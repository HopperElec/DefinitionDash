generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgres"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model School {
  id     Int     @id @default(autoincrement())
  name   String?
  domain String  @unique
  users  User[]
}

model User {
  id          Int       @id @default(autoincrement())
  name        String?
  picture     String?   @db.Text
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    Int
  googleSub   String    @unique @db.VarChar(255)
  isTeacher   Boolean   @default(false)
  allowed     Boolean   @default(false)
  sessions    Session[]
  createdMaps Map[]
  players     Player[]
}

model Session {
  uuidBin   String   @unique @db.Char(16)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  expires   DateTime @db.Timestamp(0)
}

model Map {
  id        Int     @id @default(autoincrement())
  creator   User    @relation(fields: [creatorId], references: [id])
  creatorId Int
  imgURL    String  @db.Text
  name      String?
  rooms     Room[]
  doors     Door[]
  games     Game[]
}

model Room {
  id             Int           @id @default(autoincrement())
  map            Map           @relation(fields: [mapId], references: [id])
  mapId          Int
  svgRef         Int
  name           String?
  isSpawnpoint   Boolean       @default(false)
  primaryDoors   Door[]        @relation("room1")
  secondaryDoors Door[]        @relation("room2")
  playersInside  Player[]      @relation("currRoom")
  queuedPlayers  Player[]      @relation("roomQueue")
  gamesClaimedIn ClaimedRoom[]

  @@unique([mapId, svgRef])
}

model Door {
  id      Int  @id @default(autoincrement())
  map     Map  @relation(fields: [mapId], references: [id])
  room1   Room @relation("room1", fields: [mapId, svgRef1], references: [mapId, svgRef])
  room2   Room @relation("room2", fields: [mapId, svgRef2], references: [mapId, svgRef])
  mapId   Int
  svgRef1 Int
  svgRef2 Int

  @@unique([mapId, svgRef1, svgRef2])
}

model Topic {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  definitions Definition[]
}

model Definition {
  id               Int      @id @default(autoincrement())
  topic            Topic    @relation(fields: [topicId], references: [id])
  topicId          Int
  definition       String   @db.Text
  wordClass        String?  @db.VarChar(15)
  difficulty       Int      @db.SmallInt
  usageTemplate    String?  @db.Text
  answerRegex      String
  playersAnswering Player[]
}

model Game {
  id           Int           @id @default(autoincrement())
  map          Map           @relation(fields: [mapId], references: [id])
  mapId        Int
  createdAt    DateTime      @default(now())
  isOngoing    Boolean       @default(true)
  players      Player[]
  claimedRooms ClaimedRoom[]
}

model Player {
  id             Int         @id @default(autoincrement())
  user           User        @relation(fields: [userId], references: [id])
  userId         Int
  game           Game        @relation(fields: [gameId], references: [id])
  gameId         Int
  isHost         Boolean     @default(false)
  currRoom       Room        @relation("currRoom", fields: [currRoomId], references: [id])
  currRoomId     Int
  currQuestion   Definition? @relation(fields: [currQuestionId], references: [id])
  currQuestionId Int?
  currMove       Room?       @relation("roomQueue", fields: [currMoveId], references: [id])
  currMoveId     Int?
  points         Int         @default(0)

  @@unique([userId, gameId])
}

model ClaimedRoom {
  roomId Int
  room   Room @relation(fields: [roomId], references: [id])
  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  @@id([roomId, gameId])
}

model ShopItem {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String? @db.Text
  cost        Int
  action      String
}
